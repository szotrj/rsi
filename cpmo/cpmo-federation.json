{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates federation roles for an account",
  "Parameters": {
    "EnvType": {
      "Description": "Environment Type",
      "Type": "String",
      "AllowedValues": ["DEV", "PROD"]
    },
    "CAPAccountId": {
      "Description": "Account ID of the Cloud Access Portal",
      "Type": "String",
      "Default": "Null"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1":      { "ARN" : "aws" },
      "us-east-2":      { "ARN" : "aws" },
      "us-west-1":      { "ARN" : "aws" },
      "us-west-2":      { "ARN" : "aws" },
      "us-gov-west-1":  { "ARN" : "aws-us-gov" },
      "us-isob-east-1": { "ARN" : "aws-iso-b" },
      "us-iso-east-1":  { "ARN" : "aws-iso" }
    }
  },
  "Conditions": {
    "DEV"       : { "Fn::Equals" : [{"Ref" : "EnvType"}, "DEV" ]},
    "PROD"      : { "Fn::Equals" : [{"Ref" : "EnvType"}, "PROD" ]},
    "AIRGAPPED" : { "Fn::Or" : [ { "Fn::Equals" : [{"Ref" : "AWS::Region"}, "us-isob-east-1"]}, { "Fn::Equals" : [{"Ref" : "AWS::Region"}, "us-iso-east-1"]} ] },
    "GOVCLOUD"  : { "Fn::Equals" : [{ "Ref" : "AWS::Region"}, "us-gov-west-1" ]}
  },
  "Resources" : {
    "AIPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-ai",
        "PolicyDocument" :   {
          "Version":"2012-10-17",
          "Statement" : [
            {
                "Effect" : "Allow",
                "Action": [
                    "polly:*",
                    "rekognition:*",
                    "translate:*"
                ],
                "Resource" : "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"Analytics" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-analytics",
        "PolicyDocument" :   {
          "Version":"2012-10-17",
          "Statement" : [
            {
                "Effect" : "Allow",
                "Action": [
                  "elasticmapreduce:*",
                  "es:*",
                  "kinesis:*"
                ],
                "Resource" : "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"Apps" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-apps",
        "PolicyDocument" :   {
          "Version":"2012-10-17",
          "Statement" : [
            {
			          "Sid":"AppServicesBundle",
                "Effect" : "Allow",
                "Action": [
                  "sns:*",
                  "sqs:*",
                  "swf:*",
                  "ses:*",
                  "apigateway:*"
                ],
                "Resource" : "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
  "BaselinePolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "Baseline",
        "PolicyDocument" :   {
          "Version":"2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Action": [
              "health:*",
              "sts:DecodeAuthorizationMessage",
              "sts:GetCallerIdentity",
              "support:*",
              "trustedadvisor:Describe*",
              "trustedadvisor:RefreshCheck"
            ],
            "Resource" : "*"
          }]
        },
        "Roles" : [{"Ref" : "Administrator" }, { "Ref" : "BuAnalyst" }, { "Ref" : "Compute" }, { "Ref" : "Network" }, { "Ref" : "PDeveloper" }, { "Ref" : "Provisioning" }, { "Ref" : "TReadOnly" }, { "Ref" : "WLDeveloper"}]
      },
      "DependsOn": [ "Administrator", "BuAnalyst", "Compute", "Network", "PDeveloper", "Provisioning", "TReadOnly", "WLDeveloper" ]
  },
  "BusReadOnlyPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "BusReadOnly",
        "PolicyDocument" :   {
          "Version":"2012-10-17",
          "Statement" : [
            {
                "Effect" : "Allow",
                "Action": [
                    "aws-portal:*Billing",
                    "awsbillingconsole:*Billing",
                    "aws-portal:*Usage",
                    "awsbillingconsole:*Usage",
                    "aws-portal:*PaymentMethods",
                    "awsbillingconsole:*PaymentMethods",
                    "budgets:ViewBudget",
                    "budgets:ModifyBudget",
                    "cur:*",
                    "autoscaling:DescribeAccountLimits",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeLaunchConfigurations",
                    "cloudformation:DescribeAccountLimits",
                    "cloudformation:DescribeStacks",
                    "cloudformation:ListStacks",
                    "cloudtrail:DescribeTrails",
                    "cloudtrail:GetTrailStatus",
                    "cloudwatch:Describe*",
                    "cloudwatch:Get*",
                    "cloudwatch:List*",
                    "dynamodb:DescribeTable",
                    "dynamodb:ListTables",
                    "ec2:DescribeAddresses",
                    "ec2:DescribeReservedInstances",
                    "ec2:DescribeInstances",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeInternetGateways",
                    "ec2:DescribeImages",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeReservedInstancesOfferings",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeVpnConnections",
                    "ec2:DescribeVpnGateways",
                    "elasticloadbalancing:DescribeInstanceHealth",
                    "elasticloadbalancing:DescribeLoadBalancerAttributes",
                    "elasticloadbalancing:DescribeLoadBalancerPolicies",
                    "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "iam:GenerateCredentialReport",
                    "iam:GetAccountPasswordPolicy",
                    "iam:GetAccountSummary",
                    "iam:GetCredentialReport",
                    "iam:GetServerCertificate",
                    "iam:ListServerCertificates",
                    "kinesis:DescribeLimits",
                    "organizations:*",
                    "rds:DescribeAccountAttributes",
                    "rds:DescribeDBClusters",
                    "rds:DescribeDBEngineVersions",
                    "rds:DescribeDBInstances",
                    "rds:DescribeDBParameterGroups",
                    "rds:DescribeDBParameters",
                    "rds:DescribeDBSecurityGroups",
                    "rds:DescribeDBSnapshots",
                    "rds:DescribeDBSubnetGroups",
                    "rds:DescribeEngineDefaultParameters",
                    "rds:DescribeEvents",
                    "rds:DescribeOptionGroupOptions",
                    "rds:DescribeOptionGroups",
                    "rds:DescribeOrderableDBInstanceOptions",
                    "rds:DescribeReservedDBInstances",
                    "rds:DescribeReservedDBInstancesOfferings",
                    "rds:ListTagsForResource",
                    "redshift:DescribeClusters",
                    "redshift:DescribeReservedNodeOfferings",
                    "redshift:DescribeReservedNodes",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetBucketLocation",
                    "s3:GetBucketLogging",
                    "s3:GetBucketVersioning",
                    "s3:ListBucket",
                    "s3:ListObjects",
                    "s3:ListAllMyBuckets",
                    "sqs:ListQueues",
                    "cloudwatch:GetMetricStatistics",
                    "aws-portal:View*",
                    "aws-portal:ViewUsage"
                ],
                "Resource" : "*"
            },
            {
                "Effect": "Deny",
                "Action": [
                    "aws-portal:*Account",
                    "organizations:AttachPolicy",
                    "organizations:CreateAccount",
                    "organizations:CreateOrganization",
                    "organizations:CreatePolicy",
                    "organizations:DeleteOrganization",
                    "organizations:DeleteOrganizationalUnit",
                    "organizations:DeletePolicy",
                    "organizations:DetachPolicy",
                    "organizations:DisablePolicyType",
                    "organizations:EnablePolicyType",
                    "organizations:MoveAccount",
                    "organizations:RemoveAccountFromOrganization",
                    "organizations:UpdatePolicy",
                    "organizations:UpdateOrganizationalUnit",
                    "organizations:UpdatePolicy"
                ],
                "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "BuAnalyst" }]
      },
      "DependsOn": "BuAnalyst"
  },
	"ComputeAdminPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "Compute-ComputeAdmin",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ComputeBundle",
              "Effect": "Allow",
              "Action": [
                "autoscaling:*",
                "ec2:*",
				        "elasticloadbalancing:*",
                "iam:DeleteServerCertificate",
                "iam:UpdateServerCertificate",
                "iam:UploadServerCertificate",
                "iam:PassRole",
			         	"iam:CreateServiceLinkedRole"
              ],
              "Resource": "*"
            },
            {
              "Sid": "ComputeBundleDenyNet",
              "Effect": "Deny",
              "Action": [
                "ec2:CreateVpc",
                "ec2:DeleteVpc",
                "ec2:CreateVpcPeeringConnection",
                "ec2:AcceptVpcPeeringConnection",
                "ec2:RejectVpcPeeringConnection",
                "ec2:DeleteVpcPeeringConnection",
                "ec2:CreateInternetGateway",
                "ec2:AttachInternetGateway",
                "ec2:DetachInternetGateway",
                "ec2:DeleteInternetGateway",
                "ec2:CreateVpnConnection",
                "ec2:CreateVpnConnectionRoute",
                "ec2:DeleteVpnConnection",
                "ec2:DeleteVpnConnectionRoute",
                "ec2:CreateVpnGateway",
                "ec2:AttachVpnGateway",
                "ec2:DetachVpnGateway",
                "ec2:DeleteVpnGateway",
                "ec2:CreateCustomerGateway",
                "ec2:DeleteCustomerGateway"
              ],
              "Resource": "*"
            },
            {
              "Sid": "ComputeBundleDenyImage",
              "Effect": "Deny",
              "Action": [
                "ec2:CreateInstanceExportTask",
                "ec2:CancelExportTask",
                "ec2:ModifyImageAttribute"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "Compute" }, { "Ref" : "PDeveloper" }]
      },
      "DependsOn": [ "Compute", "PDeveloper" ]
  },
  "ComputePolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-compute",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ComputeBundle",
              "Effect": "Allow",
              "Action": [
                "ec2:*",
                "autoscaling:*",
                "elasticloadbalancing:*",
                "elasticbeanstalk:*",
                "ecs:*",
                "ecr:*",
                "iam:CreateServiceLinkedRole",
                "iam:DeleteServerCertificate",
                "iam:PassRole",
                "iam:UpdateServerCertificate",
                "iam:UploadServerCertificate",
				        "lambda:*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "ComputeBundleDenyNet",
              "Effect": "Deny",
              "Action": [
                "ec2:CreateVpc",
                "ec2:DeleteVpc",
                "ec2:CreateVpcPeeringConnection",
                "ec2:AcceptVpcPeeringConnection",
                "ec2:RejectVpcPeeringConnection",
                "ec2:DeleteVpcPeeringConnection",
                "ec2:CreateInternetGateway",
                "ec2:AttachInternetGateway",
                "ec2:DetachInternetGateway",
                "ec2:DeleteInternetGateway",
                "ec2:CreateVpnConnection",
                "ec2:CreateVpnConnectionRoute",
                "ec2:DeleteVpnConnection",
                "ec2:DeleteVpnConnectionRoute",
                "ec2:CreateVpnGateway",
                "ec2:AttachVpnGateway",
                "ec2:DetachVpnGateway",
                "ec2:DeleteVpnGateway",
                "ec2:CreateCustomerGateway",
                "ec2:DeleteCustomerGateway"
              ],
              "Resource": "*"
            },
            {
              "Sid": "ComputeBundleDenyImage",
              "Effect": "Deny",
              "Action": [
                "ec2:CreateInstanceExportTask",
                "ec2:CancelExportTask",
                "ec2:ModifyImageAttribute"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"ConfigPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-config",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ConfigBundle",
              "Effect": "Allow",
              "Action": [
                "config:Get*",
                "config:Describe*",
                "config:Deliver*",
                "config:List*",
                "tag:GetResources",
                "tag:GetTagKeys",
                "cloudtrail:DescribeTrails",
                "cloudtrail:GetTrailStatus",
                "cloudtrail:LookupEvents"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"DatabasePolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-database",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "DatabaseBundle",
              "Effect": "Allow",
              "Action": [
                "rds:*",
                "dynamodb:*",
                "elasticache:*",
                "redshift:*",
                "dms:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"DevOpsPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-devops",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "DevOpsBundle",
              "Effect": "Allow",
              "Action": [
                "codepipeline:*",
                "codedeploy:*",
                "codebuild:*",
                "codecommit:*",
                "opsworks:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"DynamoDBPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "PDeveloper-dynamodb",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "DynamoDBBundle",
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "PDeveloper" }]
      },
      "DependsOn": "PDeveloper"
  },
	"EMRPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "PDeveloper-emr",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EMRBundle",
              "Effect": "Allow",
              "Action": [
                "elasticmapreduce:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "PDeveloper" }]
      },
      "DependsOn": "PDeveloper"
  },
	"KinesisPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "PDeveloper-kinesis",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "KinesisBundle",
              "Effect": "Allow",
              "Action": [
                "kinesis:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "PDeveloper" }]
      },
      "DependsOn": "PDeveloper"
  },
	"KMSPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "WLDeveloper-kms",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "KMSUser",
              "Effect": "Allow",
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:GenerateRandom",
                "kms:Describe*",
                "kms:Get*",
                "kms:List*",
                "kms:CreateGrant"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }, { "Ref" : "PDeveloper" }]
      },
      "DependsOn": [ "PDeveloper", "WLDeveloper" ]
  },
	"NetworkPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "NetAdmin-VPCAdmin",
        "PolicyDocument" :   {
          "Version":"2012-10-17",
          "Statement" : [{
		        "Sid":"PrivilegedNetwork",
            "Effect" : "Allow",
            "Action": [
              "ec2:CreateVpc",
              "ec2:DeleteVpc",
              "ec2:ModifyVpcAttribute",
              "ec2:CreateVpcPeeringConnection",
              "ec2:AcceptVpcPeeringConnection",
              "ec2:RejectVpcPeeringConnection",
              "ec2:DeleteVpcPeeringConnection",
              "ec2:CreateInternetGateway",
              "ec2:AttachInternetGateway",
              "ec2:DetachInternetGateway",
              "ec2:DeleteInternetGateway",
              "ec2:CreateVpnConnection",
              "ec2:CreateVpnConnectionRoute",
              "ec2:DeleteVpnConnection",
              "ec2:DeleteVpnConnectionRoute",
              "ec2:CreateVpnGateway",
              "ec2:AttachVpnGateway",
              "ec2:DetachVpnGateway",
              "ec2:DeleteVpnGateway",
              "ec2:DisableVgwRoutePropagation",
              "ec2:EnableVgwRoutePropagation",
              "ec2:CreateCustomerGateway",
              "ec2:DeleteCustomerGateway",
              "ec2:CreateNetworkAcl",
              "ec2:CreateNetworkAclEntry",
              "ec2:DeleteNetworkAcl",
              "ec2:DeleteNetworkAclEntry",
              "ec2:ReplaceNetworkAclAssociation",
              "ec2:ReplaceNetworkAclEntry",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:ReplaceRoute",
              "ec2:AssociateRouteTable",
              "ec2:ReplaceRouteTableAssociation",
              "ec2:DisassociateRouteTable",
              "ec2:CreateDhcpOptions",
              "ec2:AssociateDhcpOptions",
              "ec2:DeleteDhcpOptions",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSubnet",
              "directconnect:*"
            ],
            "Resource" : "*"
          },
		      {
		        "Sid":"Tagging",
            "Effect": "Allow",
            "Action": [
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:DeleteTags",
              "autoscaling:DescribeTags",
              "ec2:CreateTags",
              "ec2:DeleteTags",
              "ec2:DescribeTags",
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:RemoveTags",
              "elasticmapreduce:AddTags",
              "elasticmapreduce:RemoveTags",
              "rds:AddTagsToResource",
              "rds:ListTagsForResource",
              "rds:RemoveTagsFromResource",
              "s3:GetBucketTagging",
              "s3:PutBucketTagging"
            ],
            "Resource": "*"
		      },
		      {
		        "Sid":"ReadAll",
            "Effect": "Allow",
            "Action": [
              "autoscaling:Describe*",
              "cloudformation:Describe*",
              "cloudformation:Get*",
              "cloudformation:List*",
              "cloudwatch:Describe*",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "ec2:Describe*",
              "ec2:Get*",
              "elasticloadbalancing:Describe*",
              "elasticmapreduce:Describe*",
              "elasticmapreduce:List*",
              "iam:Get*",
              "iam:List*",
              "rds:Describe*",
              "rds:List*",
              "s3:GetBucket*",
              "s3:GetLifecycleConfiguration",
              "s3:GetObjectAcl",
              "s3:GetObjectTorrent",
              "s3:GetObjectVersionAcl",
              "s3:GetObjectVersionTorrent",
              "s3:List*",
              "sns:Get*",
              "sns:List*",
              "sqs:Get*",
              "sqs:List*",
              "sts:Get*",
              "swf:Describe*",
              "swf:Get*",
              "swf:List*"
            ],
            "Resource": "*"
		      }]
        },
        "Roles" : [{"Ref" : "Network" }]
      }
  },
	"ProvisioningPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "Provisioning",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ProvisioningAllow",
              "Effect": "Allow",
              "Action": [
                "autoscaling:*",
                "autoscaling:CreateOrUpdateTags",
                "autoscaling:DeleteTags",
                "autoscaling:Describe*",
                "autoscaling:DescribeTags",
                "aws-portal:*",
                "cloudformation:CancelUpdateStack",
                "cloudformation:CreateStack",
                "cloudformation:CreateUploadBucket",
                "cloudformation:Describe*",
                "cloudformation:Get*",
                "cloudformation:List*",
                "cloudformation:UpdateStack",
                "cloudformation:ValidateTemplate",
                "cloudtrail:*",
                "cloudwatch:DeleteAlarms",
                "cloudwatch:Describe*",
                "cloudwatch:DisableAlarmActions",
                "cloudwatch:EnableAlarmActions",
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "cloudwatch:PutMetricAlarm",
                "cloudwatch:PutMetricData",
                "cloudwatch:SetAlarmState",
                "ec2:AssociateRouteTable",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CreateSecurityGroup",
                "ec2:CreateSubnet",
                "ec2:CreateTags",
                "ec2:DeleteSecurityGroup",
                "ec2:DeleteSubnet",
                "ec2:DeleteTags",
                "ec2:Describe*",
                "ec2:DescribeTags",
                "ec2:DisassociateRouteTable",
                "ec2:Get*",
                "ec2:ModifyIdFormat",
                "ec2:ModifyImageAttribute",
                "ec2:ModifySnapshotAttribute",
                "ec2:ReplaceRouteTableAssociation",
                "ec2:ResetImageAttribute",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:RunInstances",
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances",
                "elasticloadbalancing:*",
                "elasticloadbalancing:AddTags",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:DescribeTags",
                "elasticloadbalancing:RemoveTags",
                "elasticmapreduce:AddTags",
                "elasticmapreduce:Describe*",
                "elasticmapreduce:List*",
                "elasticmapreduce:RemoveTags",
                "iam:AddRoleToInstanceProfile",
                "iam:AddUserToGroup",
                "iam:AttachGroupPolicy",
                "iam:AttachRolePolicy",
                "iam:AttachUserPolicy",
                "iam:ChangePassword",
                "iam:CreateAccessKey",
                "iam:CreateAccountAlias",
                "iam:CreateGroup",
                "iam:CreateInstanceProfile",
                "iam:CreateLoginProfile",
                "iam:CreatePolicy",
                "iam:CreatePolicyVersion",
                "iam:CreateRole",
                "iam:CreateServiceLinkedRole",
                "iam:CreateUser",
                "iam:DetachGroupPolicy",
                "iam:DetachRolePolicy",
                "iam:DetachUserPolicy",
                "iam:DeleteAccessKey",
                "iam:DeleteAccountAlias",
                "iam:DeleteAccountPasswordPolicy",
                "iam:DeleteGroup",
                "iam:DeleteGroupPolicy",
                "iam:DeleteInstanceProfile",
                "iam:DeleteLoginProfile",
                "iam:DeletePolicyVersion",
                "iam:DeleteSigningCertificate",
                "iam:DeleteUser",
                "iam:DeleteUserPolicy",
                "iam:GenerateCredentialReport",
                "iam:Get*",
                "iam:GetCredentialReport",
                "iam:List*",
                "iam:ListAccountAliases",
                "iam:PassRole",
                "iam:PutGroupPolicy",
                "iam:PutRolePolicy",
                "iam:PutUserPolicy",
                "iam:RemoveRoleFromInstanceProfile",
                "iam:RemoveUserFromGroup",
                "iam:UpdateAccessKey",
                "iam:UpdateAccountPasswordPolicy",
                "iam:UpdateAssumeRolePolicy",
                "iam:UpdateGroup",
                "iam:UpdateLoginProfile",
                "iam:UpdateSigningCertificate",
                "iam:UpdateUser",
                "iam:UploadSigningCertificate",
                "rds:AddTagsToResource",
                "rds:Describe*",
                "rds:List*",
                "rds:ListTagsForResource",
                "rds:RemoveTagsFromResource",
                "s3:CreateBucket",
                "s3:DeleteBucket*",
                "s3:GetBucket*",
                "s3:GetBucketTagging",
                "s3:GetLifecycleConfiguration",
                "s3:GetObjectAcl",
                "s3:GetObjectTorrent",
                "s3:GetObjectVersionAcl",
                "s3:GetObjectVersionTorrent",
                "s3:List*",
                "s3:PutBucket*",
                "s3:PutBucketTagging",
                "s3:PutLifecycleConfiguration",
                "sns:CreateTopic",
                "sns:DeleteTopic",
                "sns:Get*",
                "sns:List*",
                "sns:ListSubscriptions*",
                "sns:ListTopics",
                "sns:SetTopicAttributes",
                "sns:Subscribe",
                "sns:Unsubscribe",
                "sqs:Get*",
                "sqs:List*",
                "sts:Get*",
                "swf:Describe*",
                "swf:Get*",
                "swf:List*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "ProvisioningDeny",
              "Effect": "Deny",
              "Action": [
                "cloudtrail:DeleteTrail",
                "cloudtrail:StopLogging",
                "aws-portal:ModifyAccount",
                "aws-portal:ModifyBilling",
                "aws-portal:ModifyPaymentMethods",
                "aws-portal:ViewAccount",
                "aws-portal:ViewBilling",
                "aws-portal:ViewPaymentMethods",
                "aws-portal:ViewUsage"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "Provisioning" }]
      }
  },
	"RedshiftPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "PDeveloper-redshift",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "RedshiftBundle",
              "Effect": "Allow",
              "Action": [
                "redshift:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "PDeveloper" }]
      },
      "DependsOn": "PDeveloper"
  },
	"RDSPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "PDeveloper-rds",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ConfigBundle",
              "Effect": "Allow",
              "Action": [
                "rds:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "PDeveloper" }]
      },
      "DependsOn": "PDeveloper"
  },
	"SecurityPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-security",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "SecurityBundle",
              "Effect": "Allow",
              "Action": [
                "acm:*",
                "cloudhsm:*",
                "inspector:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"SnowballPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-snowball",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "SnowballBundle",
              "Effect": "Allow",
              "Action": [
                "snowball:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"StandardPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "WLDeveloper-standard",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "StandardServices",
              "Effect": "Allow",
              "Action": [
                "aws-portal:*",
				        { "Fn::If": [ "DEV", "aws-marketplace:*", { "Ref" : "AWS::NoValue" } ] },
                "cloudwatch:*",
				        "cloudformation:*",
				        "events:*",
                "logs:*",
                "sns:CreateTopic",
                "sns:ListTopics",
                "sns:ListSubscriptions*",
                "sns:Subscribe",
                "sns:Unsubscribe",
                "sns:DeleteTopic",
                "cloudformation:*",
                "iam:Get*",
                "iam:List*",
                "cloudtrail:Describe*",
                "cloudtrail:Get*",
                "cloudtrail:LookupEvents",
                "trustedadvisor:*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "DenyAccountMods",
              "Effect": "Deny",
              "Action": [
                "aws-portal:ModifyAccount"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }, { "Ref" : "PDeveloper" }]
      },
      "DependsOn": [ "PDeveloper", "WLDeveloper" ]
  },
	"StoragePolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Condition" : "DEV",
      "Properties" : {
        "PolicyName" : "WLDeveloper-storage",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "StorageBundle",
              "Effect": "Allow",
              "Action": [
                "s3:*",
				        "glacier:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "WLDeveloper" }]
      }
  },
	"TechReadOnlyPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "TechReadOnly-ReadOnly",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ReadAll",
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:Get*",
                "cloudformation:List*",
                "cloudtrail:Get*",
                "cloudtrail:Describe*",
                "cloudtrail:LookupEvents",
                "cloudwatch:Describe*",
                "cloudwatch:Get*",
                "cloudwatch:List*",
                "logs:Get*",
                "logs:Describe*",
                "logs:TestMetricFilter",
                "directconnect:Describe*",
                "dynamodb:Describe*",
                "dynamodb:List*",
                "ec2:Describe*",
                "ec2:Get*",
                "elasticloadbalancing:Describe*",
                "elasticmapreduce:Describe*",
                "elasticmapreduce:List*",
                "glacier:ListVaults",
                "glacier:DescribeVault",
                "glacier:GetVaultNotifications",
                "glacier:ListJobs",
                "glacier:DescribeJob",
                "glacier:GetJobOutput",
                "iam:Get*",
                "iam:List*",
                "kinesis:Get*",
                "kinesis:List*",
                "kinesis:Describe*",
                "redshift:Describe*",
                "redshift:ViewQueriesInConsole",
                "rds:Describe*",
                "rds:List*",
                "sts:Get*",
                "sns:Get*",
                "sns:List*",
                "sqs:Get*",
                "sqs:List*",
                "s3:GetBucket*",
                "s3:GetLifecycleConfiguration",
                "s3:GetObjectAcl",
                "s3:GetObjectTorrent",
                "s3:GetObjectVersionAcl",
                "s3:GetObjectVersionTorrent",
                "s3:List*",
                "swf:Describe*",
                "swf:Get*",
                "swf:List*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [{ "Ref" : "TReadOnly" }]
      },
      "DependsOn": "TReadOnly"
    },
    "Administrator" : {
      "Type": "AWS::IAM::Role",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "ADMINISTRATOR", "FBIGOV-Administrator" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                        { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                        { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                  ]},
                  "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                  "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            },
            "ManagedPolicyArns": [
                  { "Fn::Join": [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::aws:policy/PowerUserAccess" ] ] },
                  { "Fn::Join": [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::aws:policy/job-function/Billing" ] ] }
            ]
        }
    },
    "BuAnalyst" : {
        "Type": "AWS::IAM::Role",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "BUANALYST", "FBIGOV-BuAnalyst" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                      { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                      { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                  ]},
                  "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                  "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            }
        }
    },
    "Compute" : {
        "Type": "AWS::IAM::Role",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "COMPUTE", "FBIGOV-Compute" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                      { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                      { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                  ]},
                  "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                  "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            }
        }
    },
    "Network" : {
        "Type": "AWS::IAM::Role",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "NETWORK", "FBIGOV-Network" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                      { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                      { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                   ]},
                   "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                   "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            }
        }
    },
    "PDeveloper" : {
        "Type": "AWS::IAM::Role",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "PDEVELOPER", "FBIGOV-PDeveloper" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                      { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                      { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                  ]},
                  "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                  "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            }
        }
    },
    "Provisioning" : {
        "Type": "AWS::IAM::Role",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "PROVISIONING", "FBIGOV-Provisioning" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                      { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                      { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                  ]},
                  "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                  "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            }
        }
    },
    "TReadOnly" : {
        "Type": "AWS::IAM::Role",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "TREADONLY", "FBIGOV-TReadOnly" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                      { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                      { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                  ]},
                  "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                  "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            }
        }
    },
    "WLDeveloper" : {
        "Type": "AWS::IAM::Role",
        "Condition" : "DEV",
        "Properties" : {
            "RoleName": { "Fn::If" : [ "AIRGAPPED", "WLDEVELOPER", "FBIGOV-WLDeveloper" ] },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": { "Fn::If" : [ "AIRGAPPED",
                      { "AWS": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "CAPAccountId" }, ":root" ] ] } },
                      { "Federated": { "Fn::Join" : [ "", [ "arn:", { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ARN"]}, ":iam::", { "Ref" : "AWS::AccountId" }, ":saml-provider/FBIGOV-ADFS" ] ] } }
                  ]},
                  "Action": { "Fn::If" : [ "AIRGAPPED", "sts:AssumeRole", "sts:AssumeRoleWithSAML" ] },
                  "Condition": { "Fn::If" : [ "AIRGAPPED", { "Ref" : "AWS::NoValue" }, {"StringEquals": { "SAML:aud": { "Fn::If" : [ "GOVCLOUD", "https://signin.amazonaws-us-gov.com/saml", "https://signin.aws.amazon.com/saml" ] } } } ] }
                }
              ]
            }
          }
      }
  },
  "Outputs":{
  }
}
