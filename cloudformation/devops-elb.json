{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates an Application Load Balancer for ECSO apps",
    "Metadata": {
      "VersionDate": {
        "Value": "20190125"
      },
      "VersionNumber": {
        "Value": "1.0"
      }
    },
    "Parameters": {
      "pEnvType": {
        "Description": "Environment type",
        "Type": "String",
        "Default": "PROD",
        "AllowedValues": [ "DEV", "PREPROD", "PROD" ],
        "ConstraintDescription": "Must be one of the following environments: DEV | PREPROD | PROD"
      },
      "pVPCStackName": {
        "Description": "Name of the VPC Stack to import values from",
        "Type": "String",
        "Default": ""
      },
      "pNetworkStackName": {
        "Description": "Name of the Network Stack to import values from",
        "Type": "String",
        "Default": ""
      },
      "pSecurityGroupStackName": {
        "Description": "Name of the Security Group Stack to import values from",
        "Type": "String",
        "Default": ""
      },
      "pLoadBalancerCertArn": {
        "Type": "String",
        "Description": "ARN of SSL certificate",
        "Default": ""
      },
      "pElasticLoadBalancingAccountID": {
        "Description": "Elastic Load Balancing Account ID for the region",
        "Type": "String",
        "Default": "048591011584"
      },
      "pJenkinsCNAME": {
        "Description": "Jenkins CNAME",
        "Type": "String",
        "Default": ""
      },
      "pGitLabCNAME": {
        "Description": "GitLab CNAME",
        "Type": "String",
        "Default": ""
      },
      "pCloudCheckrCNAME": {
        "Description": "CloudCheckr CNAME",
        "Type": "String",
        "Default": ""
      }
    },
    "Conditions": {
      "cDEV": { "Fn::Equals": [ { "Ref": "pEnvType"}, "DEV" ] }
    },
    "Resources": {
      "rELBS3LoggingBucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "BucketName": "devops-elb-logging"
        }
      },
      "rELBS3LoggingBucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
          "Bucket": { "Ref": "rELBS3LoggingBucket" },
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "ELBAccessLogs",
                "Effect": "Allow",
                "Resource": {
                  "Fn::Sub": "arn:${AWS::Partition}:s3:::${rELBS3LoggingBucket}/AWSLogs/${AWS::AccountId}/*"
                },
                "Principal": { "AWS": { "Ref": "pElasticLoadBalancingAccountID" } },
                "Action": [
                  "s3:PutObject"
                ]
              }
            ]
          }
        }
      },
      "rDevOpsELB": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Name": "DEVOPS-ELB",
          "Type": "application",
          "Scheme": { "Fn::If": [ "cDEV", "internet-facing", "internal" ] },
          "Subnets": [{ "Fn::ImportValue": { "Fn::Sub": "${pNetworkStackName}-BastionSubnet1a" }}, { "Fn::ImportValue": { "Fn::Sub": "${pNetworkStackName}-BastionSubnet1b" }} ],
          "SecurityGroups": [{ "Fn::ImportValue": { "Fn::Sub": "${pSecurityGroupStackName}-DevOpsElbSG" } }],
          "LoadBalancerAttributes": [
            { "Key": "deletion_protection.enabled", "Value": "true" },
            { "Key": "access_logs.s3.enabled", "Value": "true" },
            { "Key": "access_logs.s3.bucket", "Value": { "Ref": "rELBS3LoggingBucket" } }
          ]
        },
        "DependsOn": "rELBS3LoggingBucketPolicy"
      },
      "rELBListener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "DefaultActions": [{
            "Type": "forward",
            "TargetGroupArn": { "Ref": "rCloudCheckrTargetGroup" }
          }],
          "LoadBalancerArn": { "Ref": "rDevOpsELB" },
          "Port": 443,
          "Protocol": "HTTPS",
          "Certificates": [ 
            {
              "CertificateArn": { "Ref": "pLoadBalancerCertArn" }
            }
          ]
        }
      },
      "rJenkinsListenerRule": {
        "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
        "Properties": {
          "Actions": [{
            "Type": "forward",
            "TargetGroupArn": { "Ref": "rJenkinsTargetGroup" }
          }],
          "Conditions": [{
            "Field": "host-header",
            "Values": [ { "Ref": "pJenkinsCNAME" } ]
          }],
          "ListenerArn": { "Ref": "rELBListener" },
          "Priority": 1
        }
      },
      "rGitLabListenerRule": {
        "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
        "Properties": {
          "Actions": [{
            "Type": "forward",
            "TargetGroupArn": { "Ref": "rGitLabTargetGroup" }
          }],
          "Conditions": [{
            "Field": "host-header",
            "Values": [ { "Ref": "pGitLabCNAME" } ]
          }],
          "ListenerArn": { "Ref": "rELBListener" },
          "Priority": 2
        }
      },
      "rCloudCheckrListenerRule": {
        "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
        "Properties": {
          "Actions": [{
            "Type": "forward",
            "TargetGroupArn": { "Ref": "rCloudCheckrTargetGroup" }
          }],
          "Conditions": [{
            "Field": "host-header",
            "Values": [ { "Ref": "pCloudCheckrCNAME" } ]
          }],
          "ListenerArn": { "Ref": "rELBListener" },
          "Priority": 3
        }
      },
      "rJenkinsTargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "HealthCheckPath": "/login",
          "HealthCheckIntervalSeconds": 30,
          "HealthCheckProtocol": "HTTPS",
          "HealthCheckTimeoutSeconds": 5,
          "HealthyThresholdCount": 2,
          "UnhealthyThresholdCount": 2,
          "Matcher": {
            "HttpCode": "200"
          },
          "Name": "JENKINS-TG",
          "Port": 8443,
          "Protocol": "HTTPS",
          "TargetGroupAttributes": [{
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }],
          "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${pVPCStackName}-VPCID" }}
        }
      },
      "rGitLabTargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "HealthCheckPath": "/explore",
          "HealthCheckIntervalSeconds": 30,
          "HealthCheckProtocol": "HTTPS",
          "HealthCheckTimeoutSeconds": 5,
          "HealthyThresholdCount": 2,
          "UnhealthyThresholdCount": 2,
          "Matcher": {
            "HttpCode": "200"
          },
          "Name": "GITLAB-TG",
          "Port": 443,
          "Protocol": "HTTPS",
          "TargetGroupAttributes": [{
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }],
          "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${pVPCStackName}-VPCID" }}
        }
      },
      "rCloudCheckrTargetGroup": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "HealthCheckPath": "/LogOn",
          "HealthCheckIntervalSeconds": 30,
          "HealthCheckProtocol": "HTTPS",
          "HealthCheckTimeoutSeconds": 5,
          "HealthyThresholdCount": 2,
          "UnhealthyThresholdCount": 2,
          "Matcher": {
            "HttpCode": "200"
          },
          "Name": "CLOUDCHECKR-TG",
          "Port": 443,
          "Protocol": "HTTPS",
          "TargetGroupAttributes": [{
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }],
          "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${pVPCStackName}-VPCID" }}
        }
      }
    },
    "Outputs": {
      "StackName": { "Value": { "Ref": "AWS::StackName" } },
      "StackId": { "Value": { "Ref": "AWS::StackId" } },
      "StackRegion": { "Value": { "Ref": "AWS::Region" } },
      "ELBDNS": {   
        "Description": "DNS Name of the ELB",
        "Value": { "Fn::GetAtt": [ "rDevOpsELB", "DNSName" ] }
      }
    }
  }