{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lambda Functions and CloudWatch Event Rules for remediation",
    "Metadata": {
      "TemplateOverview": {
        "Description": "This template creates Lambda functions and CloudWatch Event Rules for triggering remediation"
      },
      "ResourceDescription": {
        "Description": "A Lambda function, function permission, and CloudWatch Event Rule are created. All resources are denoted with an 'r' before the variable name"
      },
      "ParameterDescription": {
        "Description": "Parameters needed are the S3 bucket name and key for the Lambda zip package, S3 object version ID (used for updates), and the Lambda IAM service role. All parameters are denoted with a 'p' before the variable name"
        },
        "Stack": {
          "Value": "0"
        },
        "VersionDate": {
          "Value": "20181029"
        },
        "VersionNumber": {
          "Value": "1.0"
        },
        "Identifier": {
          "Value": "rsi-remediation-functions"
        },
        "Input": {
          "Description": "All required parameters retrieved from AWS Create/Update Stack API call"
        },
        "Output": {
          "Description": "rRemediateIGWFunction, rRemediateIGWRule, rPermissionForEventsToInvokeLambda"
        }
    },
    "Parameters": {
      "pS3Bucket": {
        "Type": "String",
        "Default": "cpmo-monitor-functions",
        "Description": "S3 bucket for Lambda CUD functions"
      },
      "pPackage": {
        "Type": "String",
        "Default": "remediation-functions.zip",
        "Description": "S3 key for Lambda code"
      },
      "pVersionId": {
        "Type": "String",
        "Description": "S3 Object Version ID for Lambda code"
      },
      "pMonitorRole": {
        "Type": "String",
        "Default": "MonitorRole",
        "Description": "Name of the Remediation Lambda Role"
      }
    },
    "Resources": {
      "rRemediateIGWFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName" : "remediateIGW",
          "Handler": "remediateIGW.lambda_handler",
          "Runtime": "python2.7",
          "Code": {
            "S3Bucket": { "Fn::Join" : ["-", [{ "Ref" : "pS3Bucket" }, { "Ref" : "AWS::AccountId" }] ] },
            "S3Key": { "Ref" : "pPackage" },
            "S3ObjectVersion": { "Ref": "pVersionId" }
          },
          "Description": "Remediates IGW create/attach",
          "MemorySize": 128,
          "Timeout": 30,
          "Role": { "Fn::Sub" : "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pMonitorRole}" },
          "Tags": [ { "Key": "ResourceType", "Value": "Lambda" } ]
        }
      },
      "rRemediateIGWRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "InternetGatewayRule",
          "Description": "Event Rule for Internet Gateway create/attach",
	        "EventPattern": {
            "source": [
    	        "aws.ec2"
  	        ],
  	        "detail-type": [
    	        "AWS API Call via CloudTrail"
  	        ],
    	      "detail": {
    	        "eventSource": [
    	          "ec2.amazonaws.com"
    	        ],
  	          "eventName": [
  	            "AttachInternetGateway",
  	            "CreateInternetGateway"
  	          ]
            }
	        },
          "State": "ENABLED",
          "Targets": [{
            "Arn": { "Fn::GetAtt": ["rRemediateIGWFunction", "Arn"] },
            "Id": "RemediateIGWFunction"
          }]
        }
      },
      "rPermissionForEventsToInvokeLambda": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": { "Ref": "rRemediateIGWFunction" },
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": { "Fn::GetAtt": ["rRemediateIGWRule", "Arn"] }
        }
      },
      "rNotifyFederationChangeFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName" : "notifyFederationChange",
          "Handler": "notifyFederationChange.lambda_handler",
          "Runtime": "python2.7",
          "Code": {
            "S3Bucket": { "Fn::Join" : ["-", [{ "Ref" : "pS3Bucket" }, { "Ref" : "AWS::AccountId" }] ] },
            "S3Key": { "Ref" : "pPackage" },
            "S3ObjectVersion": { "Ref": "pVersionId" }
          },
          "Description": "Notifies ECSO for change made to Federation",
          "MemorySize": 128,
          "Timeout": 30,
          "Role": { "Fn::Sub" : "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pMonitorRole}" },
          "Tags": [ { "Key": "ResourceType", "Value": "Lambda" } ]
        }
      },
      "rFederationRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "FederationRule",
          "Description": "Event Rule to notify on ECSO Federation change",
          "EventPattern": {
            "source": [
              "aws.iam"
            ],
            "detail-type": [
              "AWS API Call via CloudTrail"
            ],
            "detail": {
              "eventSource": [
                "iam.amazonaws.com"
              ],
              "eventName": [
                "AttachRolePolicy",
                "DeleteRole",
                "DeleteRolePermissionsBoundary",
                "DeleteRolePolicy",
                "DetachRolePolicy",
                "PutRolePolicy",
                "UpdateRole"
              ],
              "requestParameters": {
                "roleName": [
                  "ADMINISTRATOR",
                  "BUANALYST",
                  "COMPUTE",
                  "NETWORK",
                  "PDEVELOPER",
                  "PROVISIONING",
                  "SECURITY",
                  "TREADONLY",
                  "WLDEVELOPER"
                ]
              }
            }
          },
          "State": "ENABLED",
          "Targets": [{
            "Arn": { "Fn::GetAtt": ["rNotifyFederationChangeFunction", "Arn"] },
            "Id": "FederationFunction"
          }]
        }
      },
      "rPermissionForEventsToInvokeLambda2": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": { "Ref": "rNotifyFederationChangeFunction" },
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": { "Fn::GetAtt": ["rFederationRule", "Arn"] }
        }
      }
    }
}
