{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates a VPC and other associated resources",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "VPC Configuration"
                    },
                    "Parameters": [
                        "pNameTag",
                        "pCidrBlock",
                        "pCreateNATGW"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Configuration"
                    },
                    "Parameters": [
                        "pCreateEC2",
                        "pInstanceType"
                    ]
                }
            ],
            "ParameterLabels": {
                "pNameTag": {
                    "default": "Account Name Tag"
                },
                "pCidrBlock": {
                    "default": "VPC CIDR block"
                },
                "pCreateNATGW": {
                    "default": "Create NAT Gateway?"
                },
                "pCreateEC2": {
                    "default": "Create EC2 instance?"
                },
                "pInstanceType": {
                    "default": "EC2 Instance Type"
                }
            }
        }
    },
    "Parameters": {
        "pNameTag": {
            "Type": "String",
            "Default": "COVE",
            "Description": "Enter Name Tag (uppercase)"
        },
        "pCidrBlock": {
            "Type": "String",
            "Default": "10.0.0.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Description": "IPv4 CIDR block for the VPC"
        },
        "pCreateNATGW": {
            "Type": "String",
            "Default": "No",
            "AllowedValues": [ "Yes", "No" ], 
            "Description": "Create NAT Gateway?"
        },
        "pCreateEC2": {
            "Type": "String",
            "Default": "No",
            "AllowedValues": [ "Yes", "No" ], 
            "Description": "Create EC2 instance?"
        },
        "pInstanceType": {
            "Type": "String",
            "Default": "t3.micro",
            "AllowedValues": [ "t3.micro", "t3.small", "t3.medium", "t3.large", "m5.large" ], 
            "Description": "EC2 Instance Type"
        }
    },
    "Mappings" : {
        "mRegionMap" : {
            "us-east-1": { "AMI" : "ami-0cc96feef8c6bbff3" },
            "us-east-2": { "AMI" : "ami-00c79db59589996b9" },
            "us-west-1": { "AMI" : "ami-0ce5ae170b49e3870" },
            "us-west-2": { "AMI" : "ami-07669fc90e6e6cc47" }
        }
    },
    "Conditions": {
        "cCreateNATGW": {
            "Fn::Equals": [ { "Ref": "pCreateNATGW" }, "Yes" ]
        },
        "cCreateEC2": {
            "Fn::Equals": [ { "Ref": "pCreateEC2" }, "Yes" ]
        }
    },
    "Resources": {
        "rVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "pCidrBlock"
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "InstanceTenancy": "default",
                "Tags": [
                    { 
                        "Key": "Name", 
                        "Value": { 
                            "Fn::Sub": "${pNameTag}-VPC"
                        } 
                    }
                ]
            }
        },
        "rDHCPOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Fn::Sub": "${AWS::Region}.compute.internal"
                },
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            }
        },
        "rDHCPAssoc": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "rVPC"
                },
                "DhcpOptionsId": {
                    "Ref": "rDHCPOptions"
                }
            }
        },
        "rPublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": { "Fn::Select": [ 0, { "Fn::Cidr": [{ "Fn::GetAtt": [ "rVPC", "CidrBlock" ]}, 4, 5 ]}]},
                "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
                "VpcId": { "Ref": "rVPC" },
                "MapPublicIpOnLaunch": true,
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${pNameTag}-PUBLIC-SUBNET-1A" } } ]
            }
        },
        "rPublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": { "Fn::Select": [ 1, { "Fn::Cidr": [{ "Fn::GetAtt": [ "rVPC", "CidrBlock" ]}, 4, 5 ]}]},
                "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] },
                "VpcId": { "Ref": "rVPC" },
                "MapPublicIpOnLaunch": true,
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${pNameTag}-PUBLIC-SUBNET-1B" } } ]
            }
        },
        "rPrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": { "Fn::Select": [ 2, { "Fn::Cidr": [{ "Fn::GetAtt": [ "rVPC", "CidrBlock" ]}, 4, 5 ]}]},
                "AvailabilityZone": { "Fn::Select": [ "0", { "Fn::GetAZs": "" } ] },
                "VpcId": { "Ref": "rVPC" },
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${pNameTag}-PRIVATE-SUBNET-1A" } } ]
            }
        },
        "rPrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": { "Fn::Select": [ 3, { "Fn::Cidr": [{ "Fn::GetAtt": [ "rVPC", "CidrBlock" ]}, 4, 5 ]}]},
                "AvailabilityZone": { "Fn::Select": [ "1", { "Fn::GetAZs": "" } ] },
                "VpcId": { "Ref": "rVPC" },
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${pNameTag}-PRIVATE-SUBNET-1B" } } ]
            }
        },
        "rPublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "rVPC" },
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${pNameTag}-PUBLIC-RT" } } ]
            }
        },
        "rPrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "rVPC" },
                "Tags": [ { "Key": "Name", "Value": { "Fn::Sub": "${pNameTag}-PRIVATE-RT" } } ]
            }
        },
        "rPublicSubnetRouteAssoc1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "rPublicRouteTable" },
                "SubnetId": { "Ref": "rPublicSubnet1" }
            }
        },
        "rPublicSubnetRouteAssoc2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "rPublicRouteTable" },
                "SubnetId": { "Ref": "rPublicSubnet2" }
            }
        },
        "rPrivateSubnetRouteAssoc1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "rPrivateRouteTable" },
                "SubnetId": { "Ref": "rPrivateSubnet1" }
            }
        },
        "rPrivateSubnetRouteAssoc2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "rPrivateRouteTable" },
                "SubnetId": { "Ref": "rPrivateSubnet2" }
            }
        },
        "rIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [ 
                    { 
                        "Key": "Name", 
                        "Value": { "Fn::Sub": "${pNameTag}-VPC-IGW" } 
                    }
                ]
            }
        },
        "rAttachIGW": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "rVPC" },
                "InternetGatewayId": { "Ref": "rIGW" }
            }
        },
        "rNATGWEIP": {
            "Condition": "cCreateNATGW",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "rNATGW": {
            "Condition": "cCreateNATGW",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": { "Fn::GetAtt": ["rNATGWEIP", "AllocationId"]},
                "SubnetId": { "Ref": "rPublicSubnet1"},
                "Tags": [ 
                    { 
                        "Key": "Name",
                        "Value": { "Fn::Sub": "${pNameTag}-NAT-GW" }
                    }
                ]
            },
            "DependsOn": "rAttachIGW"
        },
        "rNATGWRoute": {
            "Condition": "cCreateNATGW",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": { "Ref": "rPrivateRouteTable" },
                "NatGatewayId": { "Ref": "rNATGW" }
            }
        },
        "rIGWRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": { "Ref": "rPublicRouteTable" },
                "GatewayId": { "Ref": "rIGW" }
            },
            "DependsOn": "rAttachIGW"
        },
        "rBastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "CPMO-RDG-BASTION-SG",
                "GroupDescription": "VPC Bastion security group",
                "VpcId": { "Ref": "rVPC" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "tcp", "FromPort": 443, "ToPort": 443, "CidrIp": "0.0.0.0/0" }
                ],
                "SecurityGroupEgress": [
                    { "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BASTION-SG"
                    }
                ]
            }
        },
        "rVpcFlowLogsServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": {
                                "Fn::Sub": "vpc-flow-logs.${AWS::URLSuffix}"
                            }
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Policies": [
                    {
                        "PolicyName": "FlowLogs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "rVpcFlowLog": {
            "Type": "AWS::EC2::FlowLog",
            "Properties": {
                "DeliverLogsPermissionArn": {
                    "Fn::GetAtt": [ "rVpcFlowLogsServiceRole", "Arn" ]
                },
                "LogGroupName": { "Fn::Sub": "${pNameTag}-VPCFlowLogGroup" },
                "ResourceId": { "Ref": "rVPC" },
                "ResourceType": "VPC",
                "TrafficType": "ALL"
            }
        },
        "rEC2Role": {
            "Type": "AWS::IAM::Role",
            "Condition": "cCreateEC2",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": {
                                "Fn::Sub": "ec2.${AWS::URLSuffix}"
                            }
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Policies": [
                    {
                        "PolicyName": "EC2RolePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "S3",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": "*"
                                }
                                {
                                    "Sid": "CloudWatchLogs",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogGroups",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "rIamInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Condition": "cCreateEC2",
            "Properties": {
                "Roles": [ { "Ref": "rEC2Role" } ]
            }
        },
        "rInstance": {
            "Type": "AWS::EC2::Instance",
            "Condition": "cCreateEC2",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "bootstrap": {
                                "command": { "Fn::Join": [ "", [
                                    "LOG=/var/log/bootstrap.log; cat /dev/null > $LOG; exec 3>&1 >> $LOG; exec 2>&3 >> $LOG;\n",
                                    "sudo yum update -y;\n",
                                    "echo \"Bootstrap complete.\"; exec 3>&-"
                                ] ] },
                                "env": {
                                }
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": { "Fn::Join": ["", [
                                    "[main]\n",
                                    "stack=", { "Ref": "AWS::StackId" }, "\n",
                                    "region=", { "Ref": "AWS::Region" }, "\n",
                                    "interval=1\n",
                                    "verbose=true\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": { "Fn::Join": ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.rInstance.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v --stack ", { "Ref": "AWS::StackId" },
                                    "   --resource rInstance",
                                    "   --region ", { "Ref": "AWS::Region" }, "\n",
                                    "runas=root\n"
                                ]]}
                            },
                            "/var/www/html/index.html": {
                                "content": "It works!",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "packages": {
                            "yum": {
                                "httpd": []
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": { "enabled": "true", "ensureRunning": "true",
                                "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]},
                                "httpd": { "enabled": "true", "ensureRunning": "true" }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "InstanceType": { "Ref": "pInstanceType" },
                "IamInstanceProfile": { "Ref": "rIamInstanceProfile" },
                "ImageId": { "Fn::FindInMap": [ "mRegionMap", { "Ref": "AWS::Region" }, "AMI"] },
                "SecurityGroupIds": [ { "Ref": "rBastionSecurityGroup" } ],
                "SubnetId": { "Ref": "rPublicSubnet1" },
                "UserData": { "Fn::Base64": { "Fn::Join": ["", [
                    "#!/bin/bash -xe\n",
                    "# Run the script from the metadata\n",
                    "/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref": "AWS::StackName" },
                    "         --resource rInstance",
                    "         --region ", { "Ref": "AWS::Region" }, "\n",
                  
                    "# Start up the cfn-hup daemon to listen for changes to the instance metadata\n",
                    "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref": "AWS::StackName" },
                    "         --resource rInstance",
                    "         --region ", { "Ref": "AWS::Region" }, "\n"
                ]]}},
                "Tags": [ 
                    {
                        "Key": "Name", 
                        "Value": { "Fn::Sub": "${pNameTag}-INSTANCE" }
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            }
        }
    },
    "Outputs": {
        "VpcId": {
            "Description": "VPC ID",
            "Value": { "Ref": "rVPC" },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-VpcId"
                }
            }
        },
        "CidrBlock": {
            "Description": "VPC CIDR Block",
            "Value": { "Fn::GetAtt": [ "rVPC", "CidrBlock" ] },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-VpcpCidrBlock"
                }
            }
        },
        "PublicRouteTable": {
            "Description": "Public Route Table ID",
            "Value": { "Ref": "rPublicRouteTable" },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-rPublicRouteTableId"
                }
            }
        },
        "PrivateRouteTable": {
            "Description": "Private Route Table ID",
            "Value": { "Ref": "rPrivateRouteTable" },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-rPrivateRouteTableId"
                }
            }
        },
        "BastionSecurityGroup": {
            "Description": "Bastion Security Group",
            "Value": { "Ref": "rBastionSecurityGroup" },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-rBastionSecurityGroup"
                }
            }
        },
        "WebsiteURL": {
            "Condition": "cCreateEC2",
            "Description": "Website URL of the instance",
            "Value": { "Fn::Sub": [ "http://${PublicIp}", { "PublicIp": { "Fn::GetAtt": [ "rInstance", "PublicIp" ] } } ] },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-WebsiteUrl"
                }
            }
        },
        "StackName": { "Value": { "Ref": "AWS::StackName" } },
        "StackId": { "Value": { "Ref": "AWS::StackId" } },
        "StackRegion": { "Value": { "Ref": "AWS::Region" } }
    }
}