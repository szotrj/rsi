{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lambda Functions and CloudWatch Event Rules for monitoring and remediation",
    "Metadata": {
      "TemplateOverview": {
        "Description": "This template creates Lambda functions and CloudWatch Event Rules for monitoring and triggering remediation"
      },
      "ResourceDescription": {
        "Description": "A Lambda function, function permission, and CloudWatch Event Rule are created. All resources are denoted with an 'r' before the variable name"
      },
      "ParameterDescription": {
        "Description": "Parameters needed are the S3 bucket name and key for the Lambda zip package, S3 object version ID (used for updates), and the Lambda IAM service role. All parameters are denoted with a 'p' before the variable name"
        },
        "Stack": {
          "Value": "0"
        },
        "VersionDate": {
          "Value": "20181226"
        },
        "VersionNumber": {
          "Value": "1.2"
        },
        "VersionHistory": {
          "Changes": "Adding CloudWatch Alarms for function errors"
        },
        "Identifier": {
          "Value": "cpmo-customer-monitoring"
        },
        "Input": {
          "Description": "All required parameters retrieved from AWS Create/Update Stack API call"
        },
        "Output": {
          "Description": "SNS Topic, Lambda Functions, Lambda Permissions, CloudWatch Event Rules"
        }
    },
    "Parameters": {
      "pS3Bucket": {
        "Type": "String",
        "Default": "cpmo-monitor-functions",
        "Description": "S3 bucket for Lambda CUD functions"
      },
      "pPackage": {
        "Type": "String",
        "Default": "monitor-functions.zip",
        "Description": "S3 key for Lambda code"
      },
      "pVersionId": {
        "Type": "String",
        "Description": "S3 Object Version ID for Lambda code"
      },
      "pMonitorRole": {
        "Type": "String",
        "Default": "FBIGOV-MonitorRole",
        "Description": "Name of the Lambda Role for invoking functions"
      },
      "pXMonitorRole": {
        "Type": "String",
        "Default": "FBIGOV-XMonitorRole",
        "Description": "Name of the cross-account Lambda Role for remediation/notification (must match name in customer template)"
      },
      "pSNSTopicName": {
        "Type": "String",
        "Default": "ecso-security-monitoring",
        "Description": "Name of the SNS topic"
      }
    },
    "Resources": {
      "rSNSTopic": {
        "Type" : "AWS::SNS::Topic",
        "Properties" : {
          "DisplayName" : "ECSO-ALERT",
          "TopicName" : { "Ref": "pSNSTopicName" }
        }
      },
      "rSnsTopicPolicy": {
        "Type": "AWS::SNS::TopicPolicy",
        "Properties": {
          "PolicyDocument": {
            "Version": "2008-10-17",
            "Id": "SnsTopicPubSubPolicy",
            "Statement": [
              {
                "Sid": "Subscribe",
                "Effect": "Allow",
                "Principal": {
                  "AWS": "*"
                },
                "Action": [
                  "sns:GetTopicAttributes",
                  "sns:Subscribe",
                  "sns:ListSubscriptionsByTopic"
                ],
                "Resource": { "Fn::Sub": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:ecso-security-monitoring" },
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceOwner": { "Fn::Sub": "${AWS::AccountId}" }
                  }
                }
              },
              {
                "Sid": "Publish",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "events.amazonaws.com",
                    "cloudwatch.amazonaws.com"
                  ]
                },
                "Action": [
                  "sns:Publish"
                ],
                "Resource": { "Fn::Sub": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:ecso-security-monitoring" },
                "Condition": {
                  "StringEquals": {
                    "AWS:SourceOwner": { "Fn::Sub": "${AWS::AccountId}" }
                  }
                }
              }
            ]
          },
          "Topics": [{ "Ref": "rSNSTopic" }]
        }
      },
      "rRemediateIGWFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName" : "remediateIGW",
          "Handler": "remediateIGW.lambda_handler",
          "Runtime": "python2.7",
          "Code": {
            "S3Bucket": { "Fn::Join" : ["-", [{ "Ref" : "pS3Bucket" }, { "Ref" : "AWS::AccountId" }] ] },
            "S3Key": { "Ref" : "pPackage" },
            "S3ObjectVersion": { "Ref": "pVersionId" }
          },
          "Description": "Remediates IGW create/attach",
          "MemorySize": 128,
          "Timeout": 30,
          "Environment": {
            "Variables" : {
              "SNSARN": { "Ref": "rSNSTopic" },
              "XROLENAME": { "Ref": "pXMonitorRole" }
            }
          },
          "Role": { "Fn::Sub" : "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pMonitorRole}" },
          "Tags": [ { "Key": "ResourceType", "Value": "Lambda" } ]
        }
      },
      "rRemediateIGWRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "ECSO-InternetGatewayRule",
          "Description": "Event Rule to match Internet Gateway API calls",
	        "EventPattern": {
            "source": [
    	        "aws.ec2"
  	        ],
  	        "detail-type": [
    	        "AWS API Call via CloudTrail"
  	        ],
  	        "detail": {
    	        "eventSource": [
      	        "ec2.amazonaws.com"
    	        ],
    	        "eventName": [
      	        "AttachInternetGateway",
      	        "CreateInternetGateway"
    	        ]
            }
	        },
          "State": "ENABLED",
          "Targets": [{
            "Arn": { "Fn::GetAtt": ["rRemediateIGWFunction", "Arn"] },
            "Id": "RemediateIGWFunction"
          }]
        }
      },
      "rPermissionForEventsToInvokeLambdaIGW": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": { "Ref": "rRemediateIGWFunction" },
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": { "Fn::GetAtt": ["rRemediateIGWRule", "Arn"] }
        }
      },
      "rNotifyFederationChangeFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "notifyFederationChange",
          "Handler": "notifyFederationChange.lambda_handler",
          "Runtime": "python2.7",
          "Code": {
            "S3Bucket": { "Fn::Join" : ["-", [{ "Ref" : "pS3Bucket" }, { "Ref" : "AWS::AccountId" }] ] },
            "S3Key": { "Ref" : "pPackage" },
            "S3ObjectVersion": { "Ref": "pVersionId" }
          },
          "Description": "Notifies and remediates changes made to Federation",
          "MemorySize": 128,
          "Timeout": 30,
          "Environment": {
            "Variables" : {
              "SNSARN": { "Ref": "rSNSTopic" },
              "XROLENAME": { "Ref": "pXMonitorRole" }
            }
          },
          "Role": { "Fn::Sub" : "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pMonitorRole}" },
          "Tags": [ { "Key": "ResourceType", "Value": "Lambda" } ]
        }
      },
      "rFederationRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "ECSO-FederationRule",
          "Description": "Event Rule to notify on Federation change",
          "EventPattern": {
            "source": [
              "aws.iam"
            ],
            "detail-type": [
              "AWS API Call via CloudTrail"
            ],
            "detail": {
              "eventSource": [
                "iam.amazonaws.com"
              ],
              "eventName": [
                "AttachRolePolicy",
                "DeleteRole",
                "DeleteRolePermissionsBoundary",
                "DeleteRolePolicy",
                "DetachRolePolicy",
                "PutRolePolicy",
                "UpdateRole"
              ],
              "requestParameters": {
                "roleName": [
                  "ADMINISTRATOR",
                  "BUANALYST",
                  "COMPUTE",
                  "NETWORK",
                  "PDEVELOPER",
                  "PROVISIONING",
                  "SECURITY",
                  "TREADONLY",
                  "WLDEVELOPER",
                  "FBIGOV-XAdmin"
                ]
              }
            }
          },
          "State": "ENABLED",
          "Targets": [{
            "Arn": { "Fn::GetAtt": ["rNotifyFederationChangeFunction", "Arn"] },
            "Id": "FederationFunction"
          }]
        }
      },
      "rPermissionForEventsToInvokeLambdaFederation": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": { "Ref": "rNotifyFederationChangeFunction" },
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": { "Fn::GetAtt": ["rFederationRule", "Arn"] }
        }
      },
      "rRemediateCloudTrailFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName" : "remediateCloudTrail",
          "Handler": "remediateCloudTrail.lambda_handler",
          "Runtime": "python2.7",
          "Code": {
            "S3Bucket": { "Fn::Join" : ["-", [{ "Ref" : "pS3Bucket" }, { "Ref" : "AWS::AccountId" }] ] },
            "S3Key": { "Ref" : "pPackage" },
            "S3ObjectVersion": { "Ref": "pVersionId" }
          },
          "Description": "Remediates changes made to CloudTrail",
          "MemorySize": 128,
          "Timeout": 30,
          "Environment": {
            "Variables" : {
              "SNSARN": { "Ref": "rSNSTopic" },
              "XROLENAME": { "Ref": "pXMonitorRole" }
            }
          },
          "Role": { "Fn::Sub" : "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pMonitorRole}" },
          "Tags": [ { "Key": "ResourceType", "Value": "Lambda" } ]
        }
      },
      "rCloudTrailRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "ECSO-CloudTrailRule",
          "Description": "Event Rule to match CloudTrail API calls",
          "EventPattern": {
            "source": [
              "aws.cloudtrail"
            ],
            "detail-type": [
              "AWS API Call via CloudTrail"
            ],
            "detail": {
              "eventSource": [
                "cloudtrail.amazonaws.com"
              ],
              "eventName": [
                "StopLogging",
                "StartLogging",
                "UpdateTrail",
                "DeleteTrail",
                "CreateTrail",
                "RemoveTags",
                "AddTags",
                "PutEventSelectors"
              ]
            }
          },
          "State": "ENABLED",
          "Targets": [{
            "Arn": { "Fn::GetAtt": ["rRemediateCloudTrailFunction", "Arn"] },
            "Id": "CloudTrailFunction"
          }]
        }
      },
      "rPermissionForEventsToInvokeLambdaCloudTrail": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": { "Ref": "rRemediateCloudTrailFunction" },
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": { "Fn::GetAtt": ["rCloudTrailRule", "Arn"] }
        }
      },
      "rRootAPIActivityFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "rootAPIMonitor",
          "Handler": "rootAPIMonitor.lambda_handler",
          "Runtime": "python2.7",
          "Code": {
            "S3Bucket": { "Fn::Join" : ["-", [{ "Ref" : "pS3Bucket" }, { "Ref" : "AWS::AccountId" }] ] },
            "S3Key": { "Ref" : "pPackage" },
            "S3ObjectVersion": { "Ref": "pVersionId" }
          },
          "Description": "Notification for Root user activity",
          "MemorySize": 128,
          "Timeout": 30,
          "Environment": {
            "Variables" : {
              "SNSARN": { "Ref": "rSNSTopic" },
              "XROLENAME": { "Ref": "pXMonitorRole" }
            }
          },
          "Role": { "Fn::Sub" : "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pMonitorRole}" },
          "Tags": [ { "Key": "ResourceType", "Value": "Lambda" } ]
        }
      },
      "rRootAPIRule": {
        "Type": "AWS::Events::Rule",
        "Properties": {
          "Name": "ECSO-RootAPIRule",
          "Description": "Event Rule to match Root user activity",
          "EventPattern": {
            "detail-type": ["AWS API Call via CloudTrail","AWS Console Sign In via CloudTrail"],
  	        "detail": {
  	          "userIdentity": {
      		      "type": ["Root"]
      	      }
  	        }
          },
          "State": "ENABLED",
          "Targets": [{
            "Arn": { "Fn::GetAtt": ["rRootAPIActivityFunction", "Arn"] },
            "Id": "RootAPIActivityFunction"
          }]
        }
      },
      "rPermissionForEventsToInvokeLambdaRootAPI": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "FunctionName": { "Ref": "rRootAPIActivityFunction" },
          "Action": "lambda:InvokeFunction",
          "Principal": "events.amazonaws.com",
          "SourceArn": { "Fn::GetAtt": ["rRootAPIRule", "Arn"] }
        }
      },
      "rRemediateIGWErrorAlarm": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmName": "RemediateIGWErrorLogNotification",
          "AlarmDescription": "When Lambda error occurs, it will be notified through SNS",
          "Namespace": "AWS/Lambda",
          "MetricName": "Errors",
          "Dimensions": [
            {
              "Name": "FunctionName",
              "Value": {"Ref": "rRemediateIGWFunction"}
            }
          ],
          "Statistic": "Sum",
          "ComparisonOperator": "GreaterThanOrEqualToThreshold",
          "Threshold": 1,
          "Period": 60,
          "EvaluationPeriods": 1,
          "AlarmActions": [{ "Ref": "rSNSTopic" }]
        }
      },
      "rNotifyFederationChangeErrorAlarm": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmName": "NotifyFederationChangeErrorLogNotification",
          "AlarmDescription": "When Lambda error occurs, it will be notified through SNS",
          "Namespace": "AWS/Lambda",
          "MetricName": "Errors",
          "Dimensions": [
            {
              "Name": "FunctionName",
              "Value": {"Ref": "rNotifyFederationChangeFunction"}
            }
          ],
          "Statistic": "Sum",
          "ComparisonOperator": "GreaterThanOrEqualToThreshold",
          "Threshold": 1,
          "Period": 60,
          "EvaluationPeriods": 1,
          "AlarmActions": [{ "Ref": "rSNSTopic" }]
        }
      },
      "rRemediateCloudTrailErrorAlarm": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmName": "RemediateCloudTrailErrorLogNotification",
          "AlarmDescription": "When Lambda error occurs, it will be notified through SNS",
          "Namespace": "AWS/Lambda",
          "MetricName": "Errors",
          "Dimensions": [
            {
              "Name": "FunctionName",
              "Value": {"Ref": "rRemediateCloudTrailFunction"}
            }
          ],
          "Statistic": "Sum",
          "ComparisonOperator": "GreaterThanOrEqualToThreshold",
          "Threshold": 1,
          "Period": 60,
          "EvaluationPeriods": 1,
          "AlarmActions": [{ "Ref": "rSNSTopic" }]
        }
      },
      "rRootAPIActivityErrorAlarm": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmName": "RootAPIActivityErrorLogNotification",
          "AlarmDescription": "When Lambda error occurs, it will be notified through SNS",
          "Namespace": "AWS/Lambda",
          "MetricName": "Errors",
          "Dimensions": [
            {
              "Name": "FunctionName",
              "Value": {"Ref": "rRootAPIActivityFunction"}
            }
          ],
          "Statistic": "Sum",
          "ComparisonOperator": "GreaterThanOrEqualToThreshold",
          "Threshold": 1,
          "Period": 60,
          "EvaluationPeriods": 1,
          "AlarmActions": [{ "Ref": "rSNSTopic" }]
        }
      }
    },
    "Outputs": {
      "oSNSTopic": {
        "Description" : "SNS Topic ARN to subscribe for security notifications",
        "Value" : { "Ref": "rSNSTopic" },
        "Export" : {
          "Name" : { "Fn::Sub": "${AWS::StackName}-SecuritySNSTopic" }
        }
      }
    }
}
